/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protoc$gen$swagger_options_annotations_pb = require('../../../../protoc-gen-swagger/options/annotations_pb.js');
goog.exportSymbol('proto.infoblox.api.Field', null, global);
goog.exportSymbol('proto.infoblox.api.FieldSelection', null, global);
goog.exportSymbol('proto.infoblox.api.Filtering', null, global);
goog.exportSymbol('proto.infoblox.api.LogicalOperator', null, global);
goog.exportSymbol('proto.infoblox.api.LogicalOperator.Type', null, global);
goog.exportSymbol('proto.infoblox.api.NullCondition', null, global);
goog.exportSymbol('proto.infoblox.api.NumberArrayCondition', null, global);
goog.exportSymbol('proto.infoblox.api.NumberArrayCondition.Type', null, global);
goog.exportSymbol('proto.infoblox.api.NumberCondition', null, global);
goog.exportSymbol('proto.infoblox.api.NumberCondition.Type', null, global);
goog.exportSymbol('proto.infoblox.api.PageInfo', null, global);
goog.exportSymbol('proto.infoblox.api.Pagination', null, global);
goog.exportSymbol('proto.infoblox.api.SortCriteria', null, global);
goog.exportSymbol('proto.infoblox.api.SortCriteria.Order', null, global);
goog.exportSymbol('proto.infoblox.api.Sorting', null, global);
goog.exportSymbol('proto.infoblox.api.StringArrayCondition', null, global);
goog.exportSymbol('proto.infoblox.api.StringArrayCondition.Type', null, global);
goog.exportSymbol('proto.infoblox.api.StringCondition', null, global);
goog.exportSymbol('proto.infoblox.api.StringCondition.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.SortCriteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infoblox.api.SortCriteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.SortCriteria.displayName = 'proto.infoblox.api.SortCriteria';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.SortCriteria.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.SortCriteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.SortCriteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.SortCriteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    order: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.SortCriteria}
 */
proto.infoblox.api.SortCriteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.SortCriteria;
  return proto.infoblox.api.SortCriteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.SortCriteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.SortCriteria}
 */
proto.infoblox.api.SortCriteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {!proto.infoblox.api.SortCriteria.Order} */ (reader.readEnum());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.SortCriteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.SortCriteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.SortCriteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.SortCriteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.SortCriteria.Order = {
  ASC: 0,
  DESC: 1
};

/**
 * optional string tag = 1;
 * @return {string}
 */
proto.infoblox.api.SortCriteria.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.infoblox.api.SortCriteria.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Order order = 2;
 * @return {!proto.infoblox.api.SortCriteria.Order}
 */
proto.infoblox.api.SortCriteria.prototype.getOrder = function() {
  return /** @type {!proto.infoblox.api.SortCriteria.Order} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.infoblox.api.SortCriteria.Order} value */
proto.infoblox.api.SortCriteria.prototype.setOrder = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.Sorting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.Sorting.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.Sorting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.Sorting.displayName = 'proto.infoblox.api.Sorting';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.Sorting.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.Sorting.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.Sorting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.Sorting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Sorting.toObject = function(includeInstance, msg) {
  var f, obj = {
    criteriasList: jspb.Message.toObjectList(msg.getCriteriasList(),
    proto.infoblox.api.SortCriteria.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.Sorting}
 */
proto.infoblox.api.Sorting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.Sorting;
  return proto.infoblox.api.Sorting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.Sorting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.Sorting}
 */
proto.infoblox.api.Sorting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infoblox.api.SortCriteria;
      reader.readMessage(value,proto.infoblox.api.SortCriteria.deserializeBinaryFromReader);
      msg.addCriterias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.Sorting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.Sorting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.Sorting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Sorting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCriteriasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.infoblox.api.SortCriteria.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SortCriteria criterias = 1;
 * @return {!Array<!proto.infoblox.api.SortCriteria>}
 */
proto.infoblox.api.Sorting.prototype.getCriteriasList = function() {
  return /** @type{!Array<!proto.infoblox.api.SortCriteria>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.infoblox.api.SortCriteria, 1));
};


/** @param {!Array<!proto.infoblox.api.SortCriteria>} value */
proto.infoblox.api.Sorting.prototype.setCriteriasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.infoblox.api.SortCriteria=} opt_value
 * @param {number=} opt_index
 * @return {!proto.infoblox.api.SortCriteria}
 */
proto.infoblox.api.Sorting.prototype.addCriterias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.infoblox.api.SortCriteria, opt_index);
};


proto.infoblox.api.Sorting.prototype.clearCriteriasList = function() {
  this.setCriteriasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.FieldSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infoblox.api.FieldSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.FieldSelection.displayName = 'proto.infoblox.api.FieldSelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.FieldSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.FieldSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.FieldSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.FieldSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.infoblox.api.Field.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.FieldSelection}
 */
proto.infoblox.api.FieldSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.FieldSelection;
  return proto.infoblox.api.FieldSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.FieldSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.FieldSelection}
 */
proto.infoblox.api.FieldSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.infoblox.api.Field.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.FieldSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.FieldSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.FieldSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.FieldSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.infoblox.api.Field.serializeBinaryToWriter);
  }
};


/**
 * map<string, Field> fields = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.infoblox.api.Field>}
 */
proto.infoblox.api.FieldSelection.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.infoblox.api.Field>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.infoblox.api.Field));
};


proto.infoblox.api.FieldSelection.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infoblox.api.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.Field.displayName = 'proto.infoblox.api.Field';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subsMap: (f = msg.getSubsMap()) ? f.toObject(includeInstance, proto.infoblox.api.Field.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.Field}
 */
proto.infoblox.api.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.Field;
  return proto.infoblox.api.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.Field}
 */
proto.infoblox.api.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getSubsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.infoblox.api.Field.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.infoblox.api.Field.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.infoblox.api.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.infoblox.api.Field.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Field> subs = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.infoblox.api.Field>}
 */
proto.infoblox.api.Field.prototype.getSubsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.infoblox.api.Field>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.infoblox.api.Field));
};


proto.infoblox.api.Field.prototype.clearSubsMap = function() {
  this.getSubsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.Filtering = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.infoblox.api.Filtering.oneofGroups_);
};
goog.inherits(proto.infoblox.api.Filtering, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.Filtering.displayName = 'proto.infoblox.api.Filtering';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.infoblox.api.Filtering.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.infoblox.api.Filtering.RootCase = {
  ROOT_NOT_SET: 0,
  OPERATOR: 1,
  STRING_CONDITION: 2,
  NUMBER_CONDITION: 3,
  NULL_CONDITION: 4,
  STRING_ARRAY_CONDITION: 5,
  NUMBER_ARRAY_CONDITION: 6
};

/**
 * @return {proto.infoblox.api.Filtering.RootCase}
 */
proto.infoblox.api.Filtering.prototype.getRootCase = function() {
  return /** @type {proto.infoblox.api.Filtering.RootCase} */(jspb.Message.computeOneofCase(this, proto.infoblox.api.Filtering.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.Filtering.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.Filtering.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.Filtering} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Filtering.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: (f = msg.getOperator()) && proto.infoblox.api.LogicalOperator.toObject(includeInstance, f),
    stringCondition: (f = msg.getStringCondition()) && proto.infoblox.api.StringCondition.toObject(includeInstance, f),
    numberCondition: (f = msg.getNumberCondition()) && proto.infoblox.api.NumberCondition.toObject(includeInstance, f),
    nullCondition: (f = msg.getNullCondition()) && proto.infoblox.api.NullCondition.toObject(includeInstance, f),
    stringArrayCondition: (f = msg.getStringArrayCondition()) && proto.infoblox.api.StringArrayCondition.toObject(includeInstance, f),
    numberArrayCondition: (f = msg.getNumberArrayCondition()) && proto.infoblox.api.NumberArrayCondition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.Filtering}
 */
proto.infoblox.api.Filtering.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.Filtering;
  return proto.infoblox.api.Filtering.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.Filtering} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.Filtering}
 */
proto.infoblox.api.Filtering.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infoblox.api.LogicalOperator;
      reader.readMessage(value,proto.infoblox.api.LogicalOperator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    case 2:
      var value = new proto.infoblox.api.StringCondition;
      reader.readMessage(value,proto.infoblox.api.StringCondition.deserializeBinaryFromReader);
      msg.setStringCondition(value);
      break;
    case 3:
      var value = new proto.infoblox.api.NumberCondition;
      reader.readMessage(value,proto.infoblox.api.NumberCondition.deserializeBinaryFromReader);
      msg.setNumberCondition(value);
      break;
    case 4:
      var value = new proto.infoblox.api.NullCondition;
      reader.readMessage(value,proto.infoblox.api.NullCondition.deserializeBinaryFromReader);
      msg.setNullCondition(value);
      break;
    case 5:
      var value = new proto.infoblox.api.StringArrayCondition;
      reader.readMessage(value,proto.infoblox.api.StringArrayCondition.deserializeBinaryFromReader);
      msg.setStringArrayCondition(value);
      break;
    case 6:
      var value = new proto.infoblox.api.NumberArrayCondition;
      reader.readMessage(value,proto.infoblox.api.NumberArrayCondition.deserializeBinaryFromReader);
      msg.setNumberArrayCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.Filtering.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.Filtering.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.Filtering} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Filtering.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.infoblox.api.LogicalOperator.serializeBinaryToWriter
    );
  }
  f = message.getStringCondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.infoblox.api.StringCondition.serializeBinaryToWriter
    );
  }
  f = message.getNumberCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.infoblox.api.NumberCondition.serializeBinaryToWriter
    );
  }
  f = message.getNullCondition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.infoblox.api.NullCondition.serializeBinaryToWriter
    );
  }
  f = message.getStringArrayCondition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.infoblox.api.StringArrayCondition.serializeBinaryToWriter
    );
  }
  f = message.getNumberArrayCondition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.infoblox.api.NumberArrayCondition.serializeBinaryToWriter
    );
  }
};


/**
 * optional LogicalOperator operator = 1;
 * @return {?proto.infoblox.api.LogicalOperator}
 */
proto.infoblox.api.Filtering.prototype.getOperator = function() {
  return /** @type{?proto.infoblox.api.LogicalOperator} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.LogicalOperator, 1));
};


/** @param {?proto.infoblox.api.LogicalOperator|undefined} value */
proto.infoblox.api.Filtering.prototype.setOperator = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringCondition string_condition = 2;
 * @return {?proto.infoblox.api.StringCondition}
 */
proto.infoblox.api.Filtering.prototype.getStringCondition = function() {
  return /** @type{?proto.infoblox.api.StringCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringCondition, 2));
};


/** @param {?proto.infoblox.api.StringCondition|undefined} value */
proto.infoblox.api.Filtering.prototype.setStringCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearStringCondition = function() {
  this.setStringCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasStringCondition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NumberCondition number_condition = 3;
 * @return {?proto.infoblox.api.NumberCondition}
 */
proto.infoblox.api.Filtering.prototype.getNumberCondition = function() {
  return /** @type{?proto.infoblox.api.NumberCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberCondition, 3));
};


/** @param {?proto.infoblox.api.NumberCondition|undefined} value */
proto.infoblox.api.Filtering.prototype.setNumberCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearNumberCondition = function() {
  this.setNumberCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasNumberCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NullCondition null_condition = 4;
 * @return {?proto.infoblox.api.NullCondition}
 */
proto.infoblox.api.Filtering.prototype.getNullCondition = function() {
  return /** @type{?proto.infoblox.api.NullCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NullCondition, 4));
};


/** @param {?proto.infoblox.api.NullCondition|undefined} value */
proto.infoblox.api.Filtering.prototype.setNullCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearNullCondition = function() {
  this.setNullCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasNullCondition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringArrayCondition string_array_condition = 5;
 * @return {?proto.infoblox.api.StringArrayCondition}
 */
proto.infoblox.api.Filtering.prototype.getStringArrayCondition = function() {
  return /** @type{?proto.infoblox.api.StringArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringArrayCondition, 5));
};


/** @param {?proto.infoblox.api.StringArrayCondition|undefined} value */
proto.infoblox.api.Filtering.prototype.setStringArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearStringArrayCondition = function() {
  this.setStringArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasStringArrayCondition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NumberArrayCondition number_array_condition = 6;
 * @return {?proto.infoblox.api.NumberArrayCondition}
 */
proto.infoblox.api.Filtering.prototype.getNumberArrayCondition = function() {
  return /** @type{?proto.infoblox.api.NumberArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberArrayCondition, 6));
};


/** @param {?proto.infoblox.api.NumberArrayCondition|undefined} value */
proto.infoblox.api.Filtering.prototype.setNumberArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.infoblox.api.Filtering.oneofGroups_[0], value);
};


proto.infoblox.api.Filtering.prototype.clearNumberArrayCondition = function() {
  this.setNumberArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.Filtering.prototype.hasNumberArrayCondition = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.LogicalOperator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.infoblox.api.LogicalOperator.oneofGroups_);
};
goog.inherits(proto.infoblox.api.LogicalOperator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.LogicalOperator.displayName = 'proto.infoblox.api.LogicalOperator';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.infoblox.api.LogicalOperator.oneofGroups_ = [[1,2,3,4,11,12],[5,6,7,8,13,14]];

/**
 * @enum {number}
 */
proto.infoblox.api.LogicalOperator.LeftCase = {
  LEFT_NOT_SET: 0,
  LEFT_OPERATOR: 1,
  LEFT_STRING_CONDITION: 2,
  LEFT_NUMBER_CONDITION: 3,
  LEFT_NULL_CONDITION: 4,
  LEFT_STRING_ARRAY_CONDITION: 11,
  LEFT_NUMBER_ARRAY_CONDITION: 12
};

/**
 * @return {proto.infoblox.api.LogicalOperator.LeftCase}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftCase = function() {
  return /** @type {proto.infoblox.api.LogicalOperator.LeftCase} */(jspb.Message.computeOneofCase(this, proto.infoblox.api.LogicalOperator.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.infoblox.api.LogicalOperator.RightCase = {
  RIGHT_NOT_SET: 0,
  RIGHT_OPERATOR: 5,
  RIGHT_STRING_CONDITION: 6,
  RIGHT_NUMBER_CONDITION: 7,
  RIGHT_NULL_CONDITION: 8,
  RIGHT_STRING_ARRAY_CONDITION: 13,
  RIGHT_NUMBER_ARRAY_CONDITION: 14
};

/**
 * @return {proto.infoblox.api.LogicalOperator.RightCase}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightCase = function() {
  return /** @type {proto.infoblox.api.LogicalOperator.RightCase} */(jspb.Message.computeOneofCase(this, proto.infoblox.api.LogicalOperator.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.LogicalOperator.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.LogicalOperator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.LogicalOperator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.LogicalOperator.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftOperator: (f = msg.getLeftOperator()) && proto.infoblox.api.LogicalOperator.toObject(includeInstance, f),
    leftStringCondition: (f = msg.getLeftStringCondition()) && proto.infoblox.api.StringCondition.toObject(includeInstance, f),
    leftNumberCondition: (f = msg.getLeftNumberCondition()) && proto.infoblox.api.NumberCondition.toObject(includeInstance, f),
    leftNullCondition: (f = msg.getLeftNullCondition()) && proto.infoblox.api.NullCondition.toObject(includeInstance, f),
    leftStringArrayCondition: (f = msg.getLeftStringArrayCondition()) && proto.infoblox.api.StringArrayCondition.toObject(includeInstance, f),
    leftNumberArrayCondition: (f = msg.getLeftNumberArrayCondition()) && proto.infoblox.api.NumberArrayCondition.toObject(includeInstance, f),
    rightOperator: (f = msg.getRightOperator()) && proto.infoblox.api.LogicalOperator.toObject(includeInstance, f),
    rightStringCondition: (f = msg.getRightStringCondition()) && proto.infoblox.api.StringCondition.toObject(includeInstance, f),
    rightNumberCondition: (f = msg.getRightNumberCondition()) && proto.infoblox.api.NumberCondition.toObject(includeInstance, f),
    rightNullCondition: (f = msg.getRightNullCondition()) && proto.infoblox.api.NullCondition.toObject(includeInstance, f),
    rightStringArrayCondition: (f = msg.getRightStringArrayCondition()) && proto.infoblox.api.StringArrayCondition.toObject(includeInstance, f),
    rightNumberArrayCondition: (f = msg.getRightNumberArrayCondition()) && proto.infoblox.api.NumberArrayCondition.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    isNegative: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.LogicalOperator}
 */
proto.infoblox.api.LogicalOperator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.LogicalOperator;
  return proto.infoblox.api.LogicalOperator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.LogicalOperator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.LogicalOperator}
 */
proto.infoblox.api.LogicalOperator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infoblox.api.LogicalOperator;
      reader.readMessage(value,proto.infoblox.api.LogicalOperator.deserializeBinaryFromReader);
      msg.setLeftOperator(value);
      break;
    case 2:
      var value = new proto.infoblox.api.StringCondition;
      reader.readMessage(value,proto.infoblox.api.StringCondition.deserializeBinaryFromReader);
      msg.setLeftStringCondition(value);
      break;
    case 3:
      var value = new proto.infoblox.api.NumberCondition;
      reader.readMessage(value,proto.infoblox.api.NumberCondition.deserializeBinaryFromReader);
      msg.setLeftNumberCondition(value);
      break;
    case 4:
      var value = new proto.infoblox.api.NullCondition;
      reader.readMessage(value,proto.infoblox.api.NullCondition.deserializeBinaryFromReader);
      msg.setLeftNullCondition(value);
      break;
    case 11:
      var value = new proto.infoblox.api.StringArrayCondition;
      reader.readMessage(value,proto.infoblox.api.StringArrayCondition.deserializeBinaryFromReader);
      msg.setLeftStringArrayCondition(value);
      break;
    case 12:
      var value = new proto.infoblox.api.NumberArrayCondition;
      reader.readMessage(value,proto.infoblox.api.NumberArrayCondition.deserializeBinaryFromReader);
      msg.setLeftNumberArrayCondition(value);
      break;
    case 5:
      var value = new proto.infoblox.api.LogicalOperator;
      reader.readMessage(value,proto.infoblox.api.LogicalOperator.deserializeBinaryFromReader);
      msg.setRightOperator(value);
      break;
    case 6:
      var value = new proto.infoblox.api.StringCondition;
      reader.readMessage(value,proto.infoblox.api.StringCondition.deserializeBinaryFromReader);
      msg.setRightStringCondition(value);
      break;
    case 7:
      var value = new proto.infoblox.api.NumberCondition;
      reader.readMessage(value,proto.infoblox.api.NumberCondition.deserializeBinaryFromReader);
      msg.setRightNumberCondition(value);
      break;
    case 8:
      var value = new proto.infoblox.api.NullCondition;
      reader.readMessage(value,proto.infoblox.api.NullCondition.deserializeBinaryFromReader);
      msg.setRightNullCondition(value);
      break;
    case 13:
      var value = new proto.infoblox.api.StringArrayCondition;
      reader.readMessage(value,proto.infoblox.api.StringArrayCondition.deserializeBinaryFromReader);
      msg.setRightStringArrayCondition(value);
      break;
    case 14:
      var value = new proto.infoblox.api.NumberArrayCondition;
      reader.readMessage(value,proto.infoblox.api.NumberArrayCondition.deserializeBinaryFromReader);
      msg.setRightNumberArrayCondition(value);
      break;
    case 9:
      var value = /** @type {!proto.infoblox.api.LogicalOperator.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.LogicalOperator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.LogicalOperator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.LogicalOperator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.LogicalOperator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeftOperator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.infoblox.api.LogicalOperator.serializeBinaryToWriter
    );
  }
  f = message.getLeftStringCondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.infoblox.api.StringCondition.serializeBinaryToWriter
    );
  }
  f = message.getLeftNumberCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.infoblox.api.NumberCondition.serializeBinaryToWriter
    );
  }
  f = message.getLeftNullCondition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.infoblox.api.NullCondition.serializeBinaryToWriter
    );
  }
  f = message.getLeftStringArrayCondition();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.infoblox.api.StringArrayCondition.serializeBinaryToWriter
    );
  }
  f = message.getLeftNumberArrayCondition();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.infoblox.api.NumberArrayCondition.serializeBinaryToWriter
    );
  }
  f = message.getRightOperator();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.infoblox.api.LogicalOperator.serializeBinaryToWriter
    );
  }
  f = message.getRightStringCondition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.infoblox.api.StringCondition.serializeBinaryToWriter
    );
  }
  f = message.getRightNumberCondition();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.infoblox.api.NumberCondition.serializeBinaryToWriter
    );
  }
  f = message.getRightNullCondition();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.infoblox.api.NullCondition.serializeBinaryToWriter
    );
  }
  f = message.getRightStringArrayCondition();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.infoblox.api.StringArrayCondition.serializeBinaryToWriter
    );
  }
  f = message.getRightNumberArrayCondition();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.infoblox.api.NumberArrayCondition.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.LogicalOperator.Type = {
  AND: 0,
  OR: 1
};

/**
 * optional LogicalOperator left_operator = 1;
 * @return {?proto.infoblox.api.LogicalOperator}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftOperator = function() {
  return /** @type{?proto.infoblox.api.LogicalOperator} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.LogicalOperator, 1));
};


/** @param {?proto.infoblox.api.LogicalOperator|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftOperator = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftOperator = function() {
  this.setLeftOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftOperator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringCondition left_string_condition = 2;
 * @return {?proto.infoblox.api.StringCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftStringCondition = function() {
  return /** @type{?proto.infoblox.api.StringCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringCondition, 2));
};


/** @param {?proto.infoblox.api.StringCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftStringCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftStringCondition = function() {
  this.setLeftStringCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftStringCondition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NumberCondition left_number_condition = 3;
 * @return {?proto.infoblox.api.NumberCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftNumberCondition = function() {
  return /** @type{?proto.infoblox.api.NumberCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberCondition, 3));
};


/** @param {?proto.infoblox.api.NumberCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftNumberCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftNumberCondition = function() {
  this.setLeftNumberCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftNumberCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NullCondition left_null_condition = 4;
 * @return {?proto.infoblox.api.NullCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftNullCondition = function() {
  return /** @type{?proto.infoblox.api.NullCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NullCondition, 4));
};


/** @param {?proto.infoblox.api.NullCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftNullCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftNullCondition = function() {
  this.setLeftNullCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftNullCondition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringArrayCondition left_string_array_condition = 11;
 * @return {?proto.infoblox.api.StringArrayCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftStringArrayCondition = function() {
  return /** @type{?proto.infoblox.api.StringArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringArrayCondition, 11));
};


/** @param {?proto.infoblox.api.StringArrayCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftStringArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftStringArrayCondition = function() {
  this.setLeftStringArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftStringArrayCondition = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NumberArrayCondition left_number_array_condition = 12;
 * @return {?proto.infoblox.api.NumberArrayCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getLeftNumberArrayCondition = function() {
  return /** @type{?proto.infoblox.api.NumberArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberArrayCondition, 12));
};


/** @param {?proto.infoblox.api.NumberArrayCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setLeftNumberArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.infoblox.api.LogicalOperator.oneofGroups_[0], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearLeftNumberArrayCondition = function() {
  this.setLeftNumberArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasLeftNumberArrayCondition = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional LogicalOperator right_operator = 5;
 * @return {?proto.infoblox.api.LogicalOperator}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightOperator = function() {
  return /** @type{?proto.infoblox.api.LogicalOperator} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.LogicalOperator, 5));
};


/** @param {?proto.infoblox.api.LogicalOperator|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightOperator = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightOperator = function() {
  this.setRightOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightOperator = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StringCondition right_string_condition = 6;
 * @return {?proto.infoblox.api.StringCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightStringCondition = function() {
  return /** @type{?proto.infoblox.api.StringCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringCondition, 6));
};


/** @param {?proto.infoblox.api.StringCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightStringCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightStringCondition = function() {
  this.setRightStringCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightStringCondition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NumberCondition right_number_condition = 7;
 * @return {?proto.infoblox.api.NumberCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightNumberCondition = function() {
  return /** @type{?proto.infoblox.api.NumberCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberCondition, 7));
};


/** @param {?proto.infoblox.api.NumberCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightNumberCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightNumberCondition = function() {
  this.setRightNumberCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightNumberCondition = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NullCondition right_null_condition = 8;
 * @return {?proto.infoblox.api.NullCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightNullCondition = function() {
  return /** @type{?proto.infoblox.api.NullCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NullCondition, 8));
};


/** @param {?proto.infoblox.api.NullCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightNullCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightNullCondition = function() {
  this.setRightNullCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightNullCondition = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional StringArrayCondition right_string_array_condition = 13;
 * @return {?proto.infoblox.api.StringArrayCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightStringArrayCondition = function() {
  return /** @type{?proto.infoblox.api.StringArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.StringArrayCondition, 13));
};


/** @param {?proto.infoblox.api.StringArrayCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightStringArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightStringArrayCondition = function() {
  this.setRightStringArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightStringArrayCondition = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional NumberArrayCondition right_number_array_condition = 14;
 * @return {?proto.infoblox.api.NumberArrayCondition}
 */
proto.infoblox.api.LogicalOperator.prototype.getRightNumberArrayCondition = function() {
  return /** @type{?proto.infoblox.api.NumberArrayCondition} */ (
    jspb.Message.getWrapperField(this, proto.infoblox.api.NumberArrayCondition, 14));
};


/** @param {?proto.infoblox.api.NumberArrayCondition|undefined} value */
proto.infoblox.api.LogicalOperator.prototype.setRightNumberArrayCondition = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.infoblox.api.LogicalOperator.oneofGroups_[1], value);
};


proto.infoblox.api.LogicalOperator.prototype.clearRightNumberArrayCondition = function() {
  this.setRightNumberArrayCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.hasRightNumberArrayCondition = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Type type = 9;
 * @return {!proto.infoblox.api.LogicalOperator.Type}
 */
proto.infoblox.api.LogicalOperator.prototype.getType = function() {
  return /** @type {!proto.infoblox.api.LogicalOperator.Type} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.infoblox.api.LogicalOperator.Type} value */
proto.infoblox.api.LogicalOperator.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool is_negative = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.LogicalOperator.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.infoblox.api.LogicalOperator.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.StringCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.StringCondition.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.StringCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.StringCondition.displayName = 'proto.infoblox.api.StringCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.StringCondition.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.StringCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.StringCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.StringCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.StringCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathList: jspb.Message.getRepeatedField(msg, 1),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNegative: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.StringCondition}
 */
proto.infoblox.api.StringCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.StringCondition;
  return proto.infoblox.api.StringCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.StringCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.StringCondition}
 */
proto.infoblox.api.StringCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.infoblox.api.StringCondition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.StringCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.StringCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.StringCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.StringCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.StringCondition.Type = {
  EQ: 0,
  MATCH: 1,
  GT: 2,
  GE: 3,
  LT: 4,
  LE: 5,
  IEQ: 6
};

/**
 * repeated string field_path = 1;
 * @return {!Array<string>}
 */
proto.infoblox.api.StringCondition.prototype.getFieldPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.infoblox.api.StringCondition.prototype.setFieldPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.StringCondition.prototype.addFieldPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.infoblox.api.StringCondition.prototype.clearFieldPathList = function() {
  this.setFieldPathList([]);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.infoblox.api.StringCondition.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.infoblox.api.StringCondition.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.infoblox.api.StringCondition.Type}
 */
proto.infoblox.api.StringCondition.prototype.getType = function() {
  return /** @type {!proto.infoblox.api.StringCondition.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.infoblox.api.StringCondition.Type} value */
proto.infoblox.api.StringCondition.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_negative = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.StringCondition.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.infoblox.api.StringCondition.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.NumberCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.NumberCondition.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.NumberCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.NumberCondition.displayName = 'proto.infoblox.api.NumberCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.NumberCondition.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.NumberCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.NumberCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.NumberCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NumberCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathList: jspb.Message.getRepeatedField(msg, 1),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNegative: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.NumberCondition}
 */
proto.infoblox.api.NumberCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.NumberCondition;
  return proto.infoblox.api.NumberCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.NumberCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.NumberCondition}
 */
proto.infoblox.api.NumberCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.infoblox.api.NumberCondition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.NumberCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.NumberCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.NumberCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NumberCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.NumberCondition.Type = {
  EQ: 0,
  GT: 1,
  GE: 2,
  LT: 3,
  LE: 4
};

/**
 * repeated string field_path = 1;
 * @return {!Array<string>}
 */
proto.infoblox.api.NumberCondition.prototype.getFieldPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.infoblox.api.NumberCondition.prototype.setFieldPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.NumberCondition.prototype.addFieldPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.infoblox.api.NumberCondition.prototype.clearFieldPathList = function() {
  this.setFieldPathList([]);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.infoblox.api.NumberCondition.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.infoblox.api.NumberCondition.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.infoblox.api.NumberCondition.Type}
 */
proto.infoblox.api.NumberCondition.prototype.getType = function() {
  return /** @type {!proto.infoblox.api.NumberCondition.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.infoblox.api.NumberCondition.Type} value */
proto.infoblox.api.NumberCondition.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_negative = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.NumberCondition.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.infoblox.api.NumberCondition.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.NullCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.NullCondition.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.NullCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.NullCondition.displayName = 'proto.infoblox.api.NullCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.NullCondition.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.NullCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.NullCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.NullCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NullCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathList: jspb.Message.getRepeatedField(msg, 1),
    isNegative: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.NullCondition}
 */
proto.infoblox.api.NullCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.NullCondition;
  return proto.infoblox.api.NullCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.NullCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.NullCondition}
 */
proto.infoblox.api.NullCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.NullCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.NullCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.NullCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NullCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string field_path = 1;
 * @return {!Array<string>}
 */
proto.infoblox.api.NullCondition.prototype.getFieldPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.infoblox.api.NullCondition.prototype.setFieldPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.NullCondition.prototype.addFieldPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.infoblox.api.NullCondition.prototype.clearFieldPathList = function() {
  this.setFieldPathList([]);
};


/**
 * optional bool is_negative = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.NullCondition.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.infoblox.api.NullCondition.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.StringArrayCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.StringArrayCondition.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.StringArrayCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.StringArrayCondition.displayName = 'proto.infoblox.api.StringArrayCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.StringArrayCondition.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.StringArrayCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.StringArrayCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.StringArrayCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.StringArrayCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedField(msg, 2),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNegative: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.StringArrayCondition}
 */
proto.infoblox.api.StringArrayCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.StringArrayCondition;
  return proto.infoblox.api.StringArrayCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.StringArrayCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.StringArrayCondition}
 */
proto.infoblox.api.StringArrayCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 3:
      var value = /** @type {!proto.infoblox.api.StringArrayCondition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.StringArrayCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.StringArrayCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.StringArrayCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.StringArrayCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.StringArrayCondition.Type = {
  IN: 0
};

/**
 * repeated string field_path = 1;
 * @return {!Array<string>}
 */
proto.infoblox.api.StringArrayCondition.prototype.getFieldPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.infoblox.api.StringArrayCondition.prototype.setFieldPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.StringArrayCondition.prototype.addFieldPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.infoblox.api.StringArrayCondition.prototype.clearFieldPathList = function() {
  this.setFieldPathList([]);
};


/**
 * repeated string values = 2;
 * @return {!Array<string>}
 */
proto.infoblox.api.StringArrayCondition.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.infoblox.api.StringArrayCondition.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.StringArrayCondition.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.infoblox.api.StringArrayCondition.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional Type type = 3;
 * @return {!proto.infoblox.api.StringArrayCondition.Type}
 */
proto.infoblox.api.StringArrayCondition.prototype.getType = function() {
  return /** @type {!proto.infoblox.api.StringArrayCondition.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.infoblox.api.StringArrayCondition.Type} value */
proto.infoblox.api.StringArrayCondition.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_negative = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.StringArrayCondition.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.infoblox.api.StringArrayCondition.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.NumberArrayCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infoblox.api.NumberArrayCondition.repeatedFields_, null);
};
goog.inherits(proto.infoblox.api.NumberArrayCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.NumberArrayCondition.displayName = 'proto.infoblox.api.NumberArrayCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infoblox.api.NumberArrayCondition.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.NumberArrayCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.NumberArrayCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.NumberArrayCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NumberArrayCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldPathList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNegative: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.NumberArrayCondition}
 */
proto.infoblox.api.NumberArrayCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.NumberArrayCondition;
  return proto.infoblox.api.NumberArrayCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.NumberArrayCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.NumberArrayCondition}
 */
proto.infoblox.api.NumberArrayCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldPath(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    case 3:
      var value = /** @type {!proto.infoblox.api.NumberArrayCondition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.NumberArrayCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.NumberArrayCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.NumberArrayCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.NumberArrayCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsNegative();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.infoblox.api.NumberArrayCondition.Type = {
  IN: 0
};

/**
 * repeated string field_path = 1;
 * @return {!Array<string>}
 */
proto.infoblox.api.NumberArrayCondition.prototype.getFieldPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.infoblox.api.NumberArrayCondition.prototype.setFieldPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.infoblox.api.NumberArrayCondition.prototype.addFieldPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.infoblox.api.NumberArrayCondition.prototype.clearFieldPathList = function() {
  this.setFieldPathList([]);
};


/**
 * repeated double values = 2;
 * @return {!Array<number>}
 */
proto.infoblox.api.NumberArrayCondition.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.infoblox.api.NumberArrayCondition.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.infoblox.api.NumberArrayCondition.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.infoblox.api.NumberArrayCondition.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional Type type = 3;
 * @return {!proto.infoblox.api.NumberArrayCondition.Type}
 */
proto.infoblox.api.NumberArrayCondition.prototype.getType = function() {
  return /** @type {!proto.infoblox.api.NumberArrayCondition.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.infoblox.api.NumberArrayCondition.Type} value */
proto.infoblox.api.NumberArrayCondition.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_negative = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.infoblox.api.NumberArrayCondition.prototype.getIsNegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.infoblox.api.NumberArrayCondition.prototype.setIsNegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infoblox.api.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.Pagination.displayName = 'proto.infoblox.api.Pagination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.Pagination}
 */
proto.infoblox.api.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.Pagination;
  return proto.infoblox.api.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.Pagination}
 */
proto.infoblox.api.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string page_token = 1;
 * @return {string}
 */
proto.infoblox.api.Pagination.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.infoblox.api.Pagination.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.infoblox.api.Pagination.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.infoblox.api.Pagination.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.infoblox.api.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.infoblox.api.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infoblox.api.PageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infoblox.api.PageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.infoblox.api.PageInfo.displayName = 'proto.infoblox.api.PageInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infoblox.api.PageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.infoblox.api.PageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infoblox.api.PageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.PageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infoblox.api.PageInfo}
 */
proto.infoblox.api.PageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infoblox.api.PageInfo;
  return proto.infoblox.api.PageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infoblox.api.PageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infoblox.api.PageInfo}
 */
proto.infoblox.api.PageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infoblox.api.PageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infoblox.api.PageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infoblox.api.PageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infoblox.api.PageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string page_token = 1;
 * @return {string}
 */
proto.infoblox.api.PageInfo.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.infoblox.api.PageInfo.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.infoblox.api.PageInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.infoblox.api.PageInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.infoblox.api.PageInfo.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.infoblox.api.PageInfo.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.infoblox.api);
