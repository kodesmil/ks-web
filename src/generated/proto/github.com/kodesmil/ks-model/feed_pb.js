/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
var protoc$gen$validate_validate_validate_pb = require('../../../protoc-gen-validate/validate/validate_pb.js');
var github_com_infobloxopen_protoc$gen$gorm_options_gorm_pb = require('../../../github.com/infobloxopen/protoc-gen-gorm/options/gorm_pb.js');
var github_com_infobloxopen_protoc$gen$gorm_types_types_pb = require('../../../github.com/infobloxopen/protoc-gen-gorm/types/types_pb.js');
var github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb = require('../../../github.com/infobloxopen/atlas-app-toolkit/query/collection_operators_pb.js');
var github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb = require('../../../github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource_pb.js');
goog.exportSymbol('proto.model.FeedArticle', null, global);
goog.exportSymbol('proto.model.FeedArticleDetail', null, global);
goog.exportSymbol('proto.model.FeedAuthor', null, global);
goog.exportSymbol('proto.model.FeedTag', null, global);
goog.exportSymbol('proto.model.ListFeedArticleRequest', null, global);
goog.exportSymbol('proto.model.ListFeedArticleResponse', null, global);
goog.exportSymbol('proto.model.ReadFeedArticleDetailsRequest', null, global);
goog.exportSymbol('proto.model.ReadFeedArticleDetailsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.FeedTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.FeedTag.repeatedFields_, null);
};
goog.inherits(proto.model.FeedTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.FeedTag.displayName = 'proto.model.FeedTag';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.FeedTag.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.FeedTag.prototype.toObject = function(opt_includeInstance) {
  return proto.model.FeedTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.FeedTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    feedArticlesList: jspb.Message.toObjectList(msg.getFeedArticlesList(),
    proto.model.FeedArticle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.FeedTag}
 */
proto.model.FeedTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.FeedTag;
  return proto.model.FeedTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.FeedTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.FeedTag}
 */
proto.model.FeedTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.model.FeedArticle;
      reader.readMessage(value,proto.model.FeedArticle.deserializeBinaryFromReader);
      msg.addFeedArticles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.FeedTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.FeedTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.FeedTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeedArticlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.model.FeedArticle.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.FeedTag.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.FeedTag.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.FeedTag.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedTag.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.model.FeedTag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.FeedTag.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.model.FeedTag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.FeedTag.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated FeedArticle feed_articles = 4;
 * @return {!Array<!proto.model.FeedArticle>}
 */
proto.model.FeedTag.prototype.getFeedArticlesList = function() {
  return /** @type{!Array<!proto.model.FeedArticle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.FeedArticle, 4));
};


/** @param {!Array<!proto.model.FeedArticle>} value */
proto.model.FeedTag.prototype.setFeedArticlesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.FeedArticle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.FeedArticle}
 */
proto.model.FeedTag.prototype.addFeedArticles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.FeedArticle, opt_index);
};


proto.model.FeedTag.prototype.clearFeedArticlesList = function() {
  this.setFeedArticlesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.FeedAuthor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.FeedAuthor.repeatedFields_, null);
};
goog.inherits(proto.model.FeedAuthor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.FeedAuthor.displayName = 'proto.model.FeedAuthor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.FeedAuthor.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.FeedAuthor.prototype.toObject = function(opt_includeInstance) {
  return proto.model.FeedAuthor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.FeedAuthor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedAuthor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    profilePhotoUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 4, ""),
    feedArticlesList: jspb.Message.toObjectList(msg.getFeedArticlesList(),
    proto.model.FeedArticle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.FeedAuthor}
 */
proto.model.FeedAuthor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.FeedAuthor;
  return proto.model.FeedAuthor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.FeedAuthor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.FeedAuthor}
 */
proto.model.FeedAuthor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfilePhotoUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 5:
      var value = new proto.model.FeedArticle;
      reader.readMessage(value,proto.model.FeedArticle.deserializeBinaryFromReader);
      msg.addFeedArticles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.FeedAuthor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.FeedAuthor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.FeedAuthor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedAuthor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProfilePhotoUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeedArticlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.model.FeedArticle.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.FeedAuthor.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.FeedAuthor.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.FeedAuthor.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedAuthor.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.model.FeedAuthor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.FeedAuthor.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string profile_photo_url = 3;
 * @return {string}
 */
proto.model.FeedAuthor.prototype.getProfilePhotoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.FeedAuthor.prototype.setProfilePhotoUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string bio = 4;
 * @return {string}
 */
proto.model.FeedAuthor.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.FeedAuthor.prototype.setBio = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated FeedArticle feed_articles = 5;
 * @return {!Array<!proto.model.FeedArticle>}
 */
proto.model.FeedAuthor.prototype.getFeedArticlesList = function() {
  return /** @type{!Array<!proto.model.FeedArticle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.FeedArticle, 5));
};


/** @param {!Array<!proto.model.FeedArticle>} value */
proto.model.FeedAuthor.prototype.setFeedArticlesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.model.FeedArticle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.FeedArticle}
 */
proto.model.FeedAuthor.prototype.addFeedArticles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.model.FeedArticle, opt_index);
};


proto.model.FeedAuthor.prototype.clearFeedArticlesList = function() {
  this.setFeedArticlesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.FeedArticleDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.FeedArticleDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.FeedArticleDetail.displayName = 'proto.model.FeedArticleDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.FeedArticleDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.model.FeedArticleDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.FeedArticleDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedArticleDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    feedArticle: (f = msg.getFeedArticle()) && proto.model.FeedArticle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.FeedArticleDetail}
 */
proto.model.FeedArticleDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.FeedArticleDetail;
  return proto.model.FeedArticleDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.FeedArticleDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.FeedArticleDetail}
 */
proto.model.FeedArticleDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = new proto.model.FeedArticle;
      reader.readMessage(value,proto.model.FeedArticle.deserializeBinaryFromReader);
      msg.setFeedArticle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.FeedArticleDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.FeedArticleDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.FeedArticleDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedArticleDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeedArticle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.model.FeedArticle.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.FeedArticleDetail.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.FeedArticleDetail.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.FeedArticleDetail.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedArticleDetail.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.model.FeedArticleDetail.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.FeedArticleDetail.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FeedArticle feed_article = 3;
 * @return {?proto.model.FeedArticle}
 */
proto.model.FeedArticleDetail.prototype.getFeedArticle = function() {
  return /** @type{?proto.model.FeedArticle} */ (
    jspb.Message.getWrapperField(this, proto.model.FeedArticle, 3));
};


/** @param {?proto.model.FeedArticle|undefined} value */
proto.model.FeedArticleDetail.prototype.setFeedArticle = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.FeedArticleDetail.prototype.clearFeedArticle = function() {
  this.setFeedArticle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedArticleDetail.prototype.hasFeedArticle = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ReadFeedArticleDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ReadFeedArticleDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ReadFeedArticleDetailsRequest.displayName = 'proto.model.ReadFeedArticleDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ReadFeedArticleDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ReadFeedArticleDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ReadFeedArticleDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ReadFeedArticleDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ReadFeedArticleDetailsRequest}
 */
proto.model.ReadFeedArticleDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ReadFeedArticleDetailsRequest;
  return proto.model.ReadFeedArticleDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ReadFeedArticleDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ReadFeedArticleDetailsRequest}
 */
proto.model.ReadFeedArticleDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ReadFeedArticleDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ReadFeedArticleDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ReadFeedArticleDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ReadFeedArticleDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.ReadFeedArticleDetailsRequest.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.ReadFeedArticleDetailsRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ReadFeedArticleDetailsRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ReadFeedArticleDetailsRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ReadFeedArticleDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ReadFeedArticleDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ReadFeedArticleDetailsResponse.displayName = 'proto.model.ReadFeedArticleDetailsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ReadFeedArticleDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ReadFeedArticleDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ReadFeedArticleDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ReadFeedArticleDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.model.FeedArticleDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ReadFeedArticleDetailsResponse}
 */
proto.model.ReadFeedArticleDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ReadFeedArticleDetailsResponse;
  return proto.model.ReadFeedArticleDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ReadFeedArticleDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ReadFeedArticleDetailsResponse}
 */
proto.model.ReadFeedArticleDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.FeedArticleDetail;
      reader.readMessage(value,proto.model.FeedArticleDetail.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ReadFeedArticleDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ReadFeedArticleDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ReadFeedArticleDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ReadFeedArticleDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.FeedArticleDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeedArticleDetail result = 1;
 * @return {?proto.model.FeedArticleDetail}
 */
proto.model.ReadFeedArticleDetailsResponse.prototype.getResult = function() {
  return /** @type{?proto.model.FeedArticleDetail} */ (
    jspb.Message.getWrapperField(this, proto.model.FeedArticleDetail, 1));
};


/** @param {?proto.model.FeedArticleDetail|undefined} value */
proto.model.ReadFeedArticleDetailsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ReadFeedArticleDetailsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ReadFeedArticleDetailsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.FeedArticle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.FeedArticle.repeatedFields_, null);
};
goog.inherits(proto.model.FeedArticle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.FeedArticle.displayName = 'proto.model.FeedArticle';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.FeedArticle.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.FeedArticle.prototype.toObject = function(opt_includeInstance) {
  return proto.model.FeedArticle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.FeedArticle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedArticle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subtitle: jspb.Message.getFieldWithDefault(msg, 4, ""),
    coverPictureUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    content: jspb.Message.getFieldWithDefault(msg, 6, ""),
    feedTagsList: jspb.Message.toObjectList(msg.getFeedTagsList(),
    proto.model.FeedTag.toObject, includeInstance),
    feedAuthor: (f = msg.getFeedAuthor()) && proto.model.FeedAuthor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.FeedArticle}
 */
proto.model.FeedArticle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.FeedArticle;
  return proto.model.FeedArticle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.FeedArticle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.FeedArticle}
 */
proto.model.FeedArticle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoverPictureUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 7:
      var value = new proto.model.FeedTag;
      reader.readMessage(value,proto.model.FeedTag.deserializeBinaryFromReader);
      msg.addFeedTags(value);
      break;
    case 8:
      var value = new proto.model.FeedAuthor;
      reader.readMessage(value,proto.model.FeedAuthor.deserializeBinaryFromReader);
      msg.setFeedAuthor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.FeedArticle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.FeedArticle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.FeedArticle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.FeedArticle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubtitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCoverPictureUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFeedTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.model.FeedTag.serializeBinaryToWriter
    );
  }
  f = message.getFeedAuthor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.model.FeedAuthor.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.FeedArticle.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.FeedArticle.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.FeedArticle.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedArticle.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.FeedArticle.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.FeedArticle.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.FeedArticle.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedArticle.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.model.FeedArticle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.FeedArticle.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subtitle = 4;
 * @return {string}
 */
proto.model.FeedArticle.prototype.getSubtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.FeedArticle.prototype.setSubtitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string cover_picture_url = 5;
 * @return {string}
 */
proto.model.FeedArticle.prototype.getCoverPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.FeedArticle.prototype.setCoverPictureUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.model.FeedArticle.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.FeedArticle.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated FeedTag feed_tags = 7;
 * @return {!Array<!proto.model.FeedTag>}
 */
proto.model.FeedArticle.prototype.getFeedTagsList = function() {
  return /** @type{!Array<!proto.model.FeedTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.FeedTag, 7));
};


/** @param {!Array<!proto.model.FeedTag>} value */
proto.model.FeedArticle.prototype.setFeedTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.model.FeedTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.FeedTag}
 */
proto.model.FeedArticle.prototype.addFeedTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.model.FeedTag, opt_index);
};


proto.model.FeedArticle.prototype.clearFeedTagsList = function() {
  this.setFeedTagsList([]);
};


/**
 * optional FeedAuthor feed_author = 8;
 * @return {?proto.model.FeedAuthor}
 */
proto.model.FeedArticle.prototype.getFeedAuthor = function() {
  return /** @type{?proto.model.FeedAuthor} */ (
    jspb.Message.getWrapperField(this, proto.model.FeedAuthor, 8));
};


/** @param {?proto.model.FeedAuthor|undefined} value */
proto.model.FeedArticle.prototype.setFeedAuthor = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.model.FeedArticle.prototype.clearFeedAuthor = function() {
  this.setFeedAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.FeedArticle.prototype.hasFeedAuthor = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListFeedArticleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ListFeedArticleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListFeedArticleRequest.displayName = 'proto.model.ListFeedArticleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListFeedArticleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListFeedArticleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListFeedArticleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListFeedArticleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.toObject(includeInstance, f),
    orderBy: (f = msg.getOrderBy()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.toObject(includeInstance, f),
    fields: (f = msg.getFields()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.toObject(includeInstance, f),
    paging: (f = msg.getPaging()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListFeedArticleRequest}
 */
proto.model.ListFeedArticleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListFeedArticleRequest;
  return proto.model.ListFeedArticleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListFeedArticleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListFeedArticleRequest}
 */
proto.model.ListFeedArticleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.deserializeBinaryFromReader);
      msg.setOrderBy(value);
      break;
    case 3:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    case 4:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListFeedArticleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListFeedArticleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListFeedArticleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListFeedArticleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.serializeBinaryToWriter
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.serializeBinaryToWriter
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional infoblox.api.Filtering filter = 1;
 * @return {?proto.infoblox.api.Filtering}
 */
proto.model.ListFeedArticleRequest.prototype.getFilter = function() {
  return /** @type{?proto.infoblox.api.Filtering} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering, 1));
};


/** @param {?proto.infoblox.api.Filtering|undefined} value */
proto.model.ListFeedArticleRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ListFeedArticleRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListFeedArticleRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional infoblox.api.Sorting order_by = 2;
 * @return {?proto.infoblox.api.Sorting}
 */
proto.model.ListFeedArticleRequest.prototype.getOrderBy = function() {
  return /** @type{?proto.infoblox.api.Sorting} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting, 2));
};


/** @param {?proto.infoblox.api.Sorting|undefined} value */
proto.model.ListFeedArticleRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ListFeedArticleRequest.prototype.clearOrderBy = function() {
  this.setOrderBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListFeedArticleRequest.prototype.hasOrderBy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional infoblox.api.FieldSelection fields = 3;
 * @return {?proto.infoblox.api.FieldSelection}
 */
proto.model.ListFeedArticleRequest.prototype.getFields = function() {
  return /** @type{?proto.infoblox.api.FieldSelection} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection, 3));
};


/** @param {?proto.infoblox.api.FieldSelection|undefined} value */
proto.model.ListFeedArticleRequest.prototype.setFields = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ListFeedArticleRequest.prototype.clearFields = function() {
  this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListFeedArticleRequest.prototype.hasFields = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional infoblox.api.Pagination paging = 4;
 * @return {?proto.infoblox.api.Pagination}
 */
proto.model.ListFeedArticleRequest.prototype.getPaging = function() {
  return /** @type{?proto.infoblox.api.Pagination} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination, 4));
};


/** @param {?proto.infoblox.api.Pagination|undefined} value */
proto.model.ListFeedArticleRequest.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.model.ListFeedArticleRequest.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListFeedArticleRequest.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListFeedArticleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ListFeedArticleResponse.repeatedFields_, null);
};
goog.inherits(proto.model.ListFeedArticleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListFeedArticleResponse.displayName = 'proto.model.ListFeedArticleResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.ListFeedArticleResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListFeedArticleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListFeedArticleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListFeedArticleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListFeedArticleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.model.FeedArticle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListFeedArticleResponse}
 */
proto.model.ListFeedArticleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListFeedArticleResponse;
  return proto.model.ListFeedArticleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListFeedArticleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListFeedArticleResponse}
 */
proto.model.ListFeedArticleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.FeedArticle;
      reader.readMessage(value,proto.model.FeedArticle.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListFeedArticleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListFeedArticleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListFeedArticleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListFeedArticleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.FeedArticle.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FeedArticle results = 1;
 * @return {!Array<!proto.model.FeedArticle>}
 */
proto.model.ListFeedArticleResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.model.FeedArticle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.FeedArticle, 1));
};


/** @param {!Array<!proto.model.FeedArticle>} value */
proto.model.ListFeedArticleResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.FeedArticle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.FeedArticle}
 */
proto.model.ListFeedArticleResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.FeedArticle, opt_index);
};


proto.model.ListFeedArticleResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};


goog.object.extend(exports, proto.model);
