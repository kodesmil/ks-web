/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_kodesmil_ks$model_profile_pb = require('../../../github.com/kodesmil/ks-model/profile_pb.js');
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
var protoc$gen$validate_validate_validate_pb = require('../../../protoc-gen-validate/validate/validate_pb.js');
var github_com_infobloxopen_protoc$gen$gorm_options_gorm_pb = require('../../../github.com/infobloxopen/protoc-gen-gorm/options/gorm_pb.js');
var github_com_infobloxopen_protoc$gen$gorm_types_types_pb = require('../../../github.com/infobloxopen/protoc-gen-gorm/types/types_pb.js');
var github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb = require('../../../github.com/infobloxopen/atlas-app-toolkit/query/collection_operators_pb.js');
var github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb = require('../../../github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource_pb.js');
goog.exportSymbol('proto.model.ChatMessage', null, global);
goog.exportSymbol('proto.model.ChatMessage.Status', null, global);
goog.exportSymbol('proto.model.ChatRoom', null, global);
goog.exportSymbol('proto.model.ChatRoomParticipant', null, global);
goog.exportSymbol('proto.model.EventForceClose', null, global);
goog.exportSymbol('proto.model.EventInviteProfile', null, global);
goog.exportSymbol('proto.model.EventLeaveRoom', null, global);
goog.exportSymbol('proto.model.EventLeaveRooms', null, global);
goog.exportSymbol('proto.model.EventLoadRoom', null, global);
goog.exportSymbol('proto.model.EventLoadRooms', null, global);
goog.exportSymbol('proto.model.EventNone', null, global);
goog.exportSymbol('proto.model.EventSendMessage', null, global);
goog.exportSymbol('proto.model.EventSendMessages', null, global);
goog.exportSymbol('proto.model.EventSendRooms', null, global);
goog.exportSymbol('proto.model.ListChatMessageRequest', null, global);
goog.exportSymbol('proto.model.ListChatMessageResponse', null, global);
goog.exportSymbol('proto.model.ListChatRoomRequest', null, global);
goog.exportSymbol('proto.model.ListChatRoomResponse', null, global);
goog.exportSymbol('proto.model.StreamChatEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ChatMessage.displayName = 'proto.model.ChatMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    author: (f = msg.getAuthor()) && proto.model.ChatRoomParticipant.toObject(includeInstance, f),
    authorId: (f = msg.getAuthorId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ChatMessage}
 */
proto.model.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ChatMessage;
  return proto.model.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ChatMessage}
 */
proto.model.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = new proto.model.ChatRoomParticipant;
      reader.readMessage(value,proto.model.ChatRoomParticipant.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 6:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setAuthorId(value);
      break;
    case 7:
      var value = /** @type {!proto.model.ChatMessage.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.model.ChatRoomParticipant.serializeBinaryToWriter
    );
  }
  f = message.getAuthorId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.model.ChatMessage.Status = {
  DELIVERED: 0,
  NOT_DELIVERED: 1
};

/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.ChatMessage.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.ChatMessage.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ChatMessage.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatMessage.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatMessage.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatMessage.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ChatMessage.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatMessage.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatMessage.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatMessage.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ChatMessage.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatMessage.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.model.ChatMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.ChatMessage.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ChatRoomParticipant author = 5;
 * @return {?proto.model.ChatRoomParticipant}
 */
proto.model.ChatMessage.prototype.getAuthor = function() {
  return /** @type{?proto.model.ChatRoomParticipant} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatRoomParticipant, 5));
};


/** @param {?proto.model.ChatRoomParticipant|undefined} value */
proto.model.ChatMessage.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.model.ChatMessage.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatMessage.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional atlas.rpc.Identifier author_id = 6;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.ChatMessage.prototype.getAuthorId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 6));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.ChatMessage.prototype.setAuthorId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.model.ChatMessage.prototype.clearAuthorId = function() {
  this.setAuthorId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatMessage.prototype.hasAuthorId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Status status = 7;
 * @return {!proto.model.ChatMessage.Status}
 */
proto.model.ChatMessage.prototype.getStatus = function() {
  return /** @type {!proto.model.ChatMessage.Status} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.model.ChatMessage.Status} value */
proto.model.ChatMessage.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ChatRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ChatRoom.repeatedFields_, null);
};
goog.inherits(proto.model.ChatRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ChatRoom.displayName = 'proto.model.ChatRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.ChatRoom.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ChatRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ChatRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ChatRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.model.ChatRoomParticipant.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ChatRoom}
 */
proto.model.ChatRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ChatRoom;
  return proto.model.ChatRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ChatRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ChatRoom}
 */
proto.model.ChatRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.model.ChatRoomParticipant;
      reader.readMessage(value,proto.model.ChatRoomParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ChatRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ChatRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ChatRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.model.ChatRoomParticipant.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.ChatRoom.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.ChatRoom.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ChatRoom.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoom.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatRoom.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatRoom.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ChatRoom.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoom.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatRoom.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatRoom.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ChatRoom.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoom.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ChatRoomParticipant participants = 4;
 * @return {!Array<!proto.model.ChatRoomParticipant>}
 */
proto.model.ChatRoom.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.model.ChatRoomParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.ChatRoomParticipant, 4));
};


/** @param {!Array<!proto.model.ChatRoomParticipant>} value */
proto.model.ChatRoom.prototype.setParticipantsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.ChatRoomParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.ChatRoomParticipant}
 */
proto.model.ChatRoom.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.ChatRoomParticipant, opt_index);
};


proto.model.ChatRoom.prototype.clearParticipantsList = function() {
  this.setParticipantsList([]);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.model.ChatRoom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.ChatRoom.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ChatRoomParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ChatRoomParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ChatRoomParticipant.displayName = 'proto.model.ChatRoomParticipant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ChatRoomParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ChatRoomParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ChatRoomParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatRoomParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastSeenAt: (f = msg.getLastSeenAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    profile: (f = msg.getProfile()) && github_com_kodesmil_ks$model_profile_pb.Profile.toObject(includeInstance, f),
    chatRoom: (f = msg.getChatRoom()) && proto.model.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ChatRoomParticipant}
 */
proto.model.ChatRoomParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ChatRoomParticipant;
  return proto.model.ChatRoomParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ChatRoomParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ChatRoomParticipant}
 */
proto.model.ChatRoomParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastSeenAt(value);
      break;
    case 5:
      var value = new github_com_kodesmil_ks$model_profile_pb.Profile;
      reader.readMessage(value,github_com_kodesmil_ks$model_profile_pb.Profile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    case 6:
      var value = new proto.model.ChatRoom;
      reader.readMessage(value,proto.model.ChatRoom.deserializeBinaryFromReader);
      msg.setChatRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ChatRoomParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ChatRoomParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ChatRoomParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ChatRoomParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastSeenAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      github_com_kodesmil_ks$model_profile_pb.Profile.serializeBinaryToWriter
    );
  }
  f = message.getChatRoom();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.model.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional atlas.rpc.Identifier id = 1;
 * @return {?proto.atlas.rpc.Identifier}
 */
proto.model.ChatRoomParticipant.prototype.getId = function() {
  return /** @type{?proto.atlas.rpc.Identifier} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_rpc_resource_resource_pb.Identifier, 1));
};


/** @param {?proto.atlas.rpc.Identifier|undefined} value */
proto.model.ChatRoomParticipant.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ChatRoomParticipant.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatRoomParticipant.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatRoomParticipant.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ChatRoomParticipant.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatRoomParticipant.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatRoomParticipant.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ChatRoomParticipant.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp last_seen_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.ChatRoomParticipant.prototype.getLastSeenAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.ChatRoomParticipant.prototype.setLastSeenAt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.model.ChatRoomParticipant.prototype.clearLastSeenAt = function() {
  this.setLastSeenAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasLastSeenAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Profile profile = 5;
 * @return {?proto.model.Profile}
 */
proto.model.ChatRoomParticipant.prototype.getProfile = function() {
  return /** @type{?proto.model.Profile} */ (
    jspb.Message.getWrapperField(this, github_com_kodesmil_ks$model_profile_pb.Profile, 5));
};


/** @param {?proto.model.Profile|undefined} value */
proto.model.ChatRoomParticipant.prototype.setProfile = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.model.ChatRoomParticipant.prototype.clearProfile = function() {
  this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ChatRoom chat_room = 6;
 * @return {?proto.model.ChatRoom}
 */
proto.model.ChatRoomParticipant.prototype.getChatRoom = function() {
  return /** @type{?proto.model.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatRoom, 6));
};


/** @param {?proto.model.ChatRoom|undefined} value */
proto.model.ChatRoomParticipant.prototype.setChatRoom = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.model.ChatRoomParticipant.prototype.clearChatRoom = function() {
  this.setChatRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ChatRoomParticipant.prototype.hasChatRoom = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.StreamChatEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.StreamChatEvent.oneofGroups_);
};
goog.inherits(proto.model.StreamChatEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.StreamChatEvent.displayName = 'proto.model.StreamChatEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.StreamChatEvent.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.model.StreamChatEvent.EventCase = {
  EVENT_NOT_SET: 0,
  NONE: 1,
  LOAD_ROOM: 2,
  LOAD_ROOMS: 3,
  LEAVE_ROOM: 4,
  LEAVE_ROOMS: 5,
  SEND_ROOMS: 6,
  SEND_MESSAGE: 7,
  SEND_MESSAGES: 8,
  FORCE_CLOSE: 9,
  INVITE_PROFILE: 10
};

/**
 * @return {proto.model.StreamChatEvent.EventCase}
 */
proto.model.StreamChatEvent.prototype.getEventCase = function() {
  return /** @type {proto.model.StreamChatEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.model.StreamChatEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.StreamChatEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.model.StreamChatEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.StreamChatEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.StreamChatEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    none: (f = msg.getNone()) && proto.model.EventNone.toObject(includeInstance, f),
    loadRoom: (f = msg.getLoadRoom()) && proto.model.EventLoadRoom.toObject(includeInstance, f),
    loadRooms: (f = msg.getLoadRooms()) && proto.model.EventLoadRooms.toObject(includeInstance, f),
    leaveRoom: (f = msg.getLeaveRoom()) && proto.model.EventLeaveRoom.toObject(includeInstance, f),
    leaveRooms: (f = msg.getLeaveRooms()) && proto.model.EventLeaveRooms.toObject(includeInstance, f),
    sendRooms: (f = msg.getSendRooms()) && proto.model.EventSendRooms.toObject(includeInstance, f),
    sendMessage: (f = msg.getSendMessage()) && proto.model.EventSendMessage.toObject(includeInstance, f),
    sendMessages: (f = msg.getSendMessages()) && proto.model.EventSendMessages.toObject(includeInstance, f),
    forceClose: (f = msg.getForceClose()) && proto.model.EventForceClose.toObject(includeInstance, f),
    inviteProfile: (f = msg.getInviteProfile()) && proto.model.EventInviteProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.StreamChatEvent}
 */
proto.model.StreamChatEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.StreamChatEvent;
  return proto.model.StreamChatEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.StreamChatEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.StreamChatEvent}
 */
proto.model.StreamChatEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.EventNone;
      reader.readMessage(value,proto.model.EventNone.deserializeBinaryFromReader);
      msg.setNone(value);
      break;
    case 2:
      var value = new proto.model.EventLoadRoom;
      reader.readMessage(value,proto.model.EventLoadRoom.deserializeBinaryFromReader);
      msg.setLoadRoom(value);
      break;
    case 3:
      var value = new proto.model.EventLoadRooms;
      reader.readMessage(value,proto.model.EventLoadRooms.deserializeBinaryFromReader);
      msg.setLoadRooms(value);
      break;
    case 4:
      var value = new proto.model.EventLeaveRoom;
      reader.readMessage(value,proto.model.EventLeaveRoom.deserializeBinaryFromReader);
      msg.setLeaveRoom(value);
      break;
    case 5:
      var value = new proto.model.EventLeaveRooms;
      reader.readMessage(value,proto.model.EventLeaveRooms.deserializeBinaryFromReader);
      msg.setLeaveRooms(value);
      break;
    case 6:
      var value = new proto.model.EventSendRooms;
      reader.readMessage(value,proto.model.EventSendRooms.deserializeBinaryFromReader);
      msg.setSendRooms(value);
      break;
    case 7:
      var value = new proto.model.EventSendMessage;
      reader.readMessage(value,proto.model.EventSendMessage.deserializeBinaryFromReader);
      msg.setSendMessage(value);
      break;
    case 8:
      var value = new proto.model.EventSendMessages;
      reader.readMessage(value,proto.model.EventSendMessages.deserializeBinaryFromReader);
      msg.setSendMessages(value);
      break;
    case 9:
      var value = new proto.model.EventForceClose;
      reader.readMessage(value,proto.model.EventForceClose.deserializeBinaryFromReader);
      msg.setForceClose(value);
      break;
    case 10:
      var value = new proto.model.EventInviteProfile;
      reader.readMessage(value,proto.model.EventInviteProfile.deserializeBinaryFromReader);
      msg.setInviteProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.StreamChatEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.StreamChatEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.StreamChatEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.StreamChatEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.EventNone.serializeBinaryToWriter
    );
  }
  f = message.getLoadRoom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.EventLoadRoom.serializeBinaryToWriter
    );
  }
  f = message.getLoadRooms();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.model.EventLoadRooms.serializeBinaryToWriter
    );
  }
  f = message.getLeaveRoom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.EventLeaveRoom.serializeBinaryToWriter
    );
  }
  f = message.getLeaveRooms();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.model.EventLeaveRooms.serializeBinaryToWriter
    );
  }
  f = message.getSendRooms();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.model.EventSendRooms.serializeBinaryToWriter
    );
  }
  f = message.getSendMessage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.model.EventSendMessage.serializeBinaryToWriter
    );
  }
  f = message.getSendMessages();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.model.EventSendMessages.serializeBinaryToWriter
    );
  }
  f = message.getForceClose();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.model.EventForceClose.serializeBinaryToWriter
    );
  }
  f = message.getInviteProfile();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.model.EventInviteProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventNone none = 1;
 * @return {?proto.model.EventNone}
 */
proto.model.StreamChatEvent.prototype.getNone = function() {
  return /** @type{?proto.model.EventNone} */ (
    jspb.Message.getWrapperField(this, proto.model.EventNone, 1));
};


/** @param {?proto.model.EventNone|undefined} value */
proto.model.StreamChatEvent.prototype.setNone = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearNone = function() {
  this.setNone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasNone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventLoadRoom load_room = 2;
 * @return {?proto.model.EventLoadRoom}
 */
proto.model.StreamChatEvent.prototype.getLoadRoom = function() {
  return /** @type{?proto.model.EventLoadRoom} */ (
    jspb.Message.getWrapperField(this, proto.model.EventLoadRoom, 2));
};


/** @param {?proto.model.EventLoadRoom|undefined} value */
proto.model.StreamChatEvent.prototype.setLoadRoom = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearLoadRoom = function() {
  this.setLoadRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasLoadRoom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventLoadRooms load_rooms = 3;
 * @return {?proto.model.EventLoadRooms}
 */
proto.model.StreamChatEvent.prototype.getLoadRooms = function() {
  return /** @type{?proto.model.EventLoadRooms} */ (
    jspb.Message.getWrapperField(this, proto.model.EventLoadRooms, 3));
};


/** @param {?proto.model.EventLoadRooms|undefined} value */
proto.model.StreamChatEvent.prototype.setLoadRooms = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearLoadRooms = function() {
  this.setLoadRooms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasLoadRooms = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventLeaveRoom leave_room = 4;
 * @return {?proto.model.EventLeaveRoom}
 */
proto.model.StreamChatEvent.prototype.getLeaveRoom = function() {
  return /** @type{?proto.model.EventLeaveRoom} */ (
    jspb.Message.getWrapperField(this, proto.model.EventLeaveRoom, 4));
};


/** @param {?proto.model.EventLeaveRoom|undefined} value */
proto.model.StreamChatEvent.prototype.setLeaveRoom = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearLeaveRoom = function() {
  this.setLeaveRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasLeaveRoom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventLeaveRooms leave_rooms = 5;
 * @return {?proto.model.EventLeaveRooms}
 */
proto.model.StreamChatEvent.prototype.getLeaveRooms = function() {
  return /** @type{?proto.model.EventLeaveRooms} */ (
    jspb.Message.getWrapperField(this, proto.model.EventLeaveRooms, 5));
};


/** @param {?proto.model.EventLeaveRooms|undefined} value */
proto.model.StreamChatEvent.prototype.setLeaveRooms = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearLeaveRooms = function() {
  this.setLeaveRooms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasLeaveRooms = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventSendRooms send_rooms = 6;
 * @return {?proto.model.EventSendRooms}
 */
proto.model.StreamChatEvent.prototype.getSendRooms = function() {
  return /** @type{?proto.model.EventSendRooms} */ (
    jspb.Message.getWrapperField(this, proto.model.EventSendRooms, 6));
};


/** @param {?proto.model.EventSendRooms|undefined} value */
proto.model.StreamChatEvent.prototype.setSendRooms = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearSendRooms = function() {
  this.setSendRooms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasSendRooms = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventSendMessage send_message = 7;
 * @return {?proto.model.EventSendMessage}
 */
proto.model.StreamChatEvent.prototype.getSendMessage = function() {
  return /** @type{?proto.model.EventSendMessage} */ (
    jspb.Message.getWrapperField(this, proto.model.EventSendMessage, 7));
};


/** @param {?proto.model.EventSendMessage|undefined} value */
proto.model.StreamChatEvent.prototype.setSendMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearSendMessage = function() {
  this.setSendMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasSendMessage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventSendMessages send_messages = 8;
 * @return {?proto.model.EventSendMessages}
 */
proto.model.StreamChatEvent.prototype.getSendMessages = function() {
  return /** @type{?proto.model.EventSendMessages} */ (
    jspb.Message.getWrapperField(this, proto.model.EventSendMessages, 8));
};


/** @param {?proto.model.EventSendMessages|undefined} value */
proto.model.StreamChatEvent.prototype.setSendMessages = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearSendMessages = function() {
  this.setSendMessages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasSendMessages = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EventForceClose force_close = 9;
 * @return {?proto.model.EventForceClose}
 */
proto.model.StreamChatEvent.prototype.getForceClose = function() {
  return /** @type{?proto.model.EventForceClose} */ (
    jspb.Message.getWrapperField(this, proto.model.EventForceClose, 9));
};


/** @param {?proto.model.EventForceClose|undefined} value */
proto.model.StreamChatEvent.prototype.setForceClose = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearForceClose = function() {
  this.setForceClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasForceClose = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EventInviteProfile invite_profile = 10;
 * @return {?proto.model.EventInviteProfile}
 */
proto.model.StreamChatEvent.prototype.getInviteProfile = function() {
  return /** @type{?proto.model.EventInviteProfile} */ (
    jspb.Message.getWrapperField(this, proto.model.EventInviteProfile, 10));
};


/** @param {?proto.model.EventInviteProfile|undefined} value */
proto.model.StreamChatEvent.prototype.setInviteProfile = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.model.StreamChatEvent.oneofGroups_[0], value);
};


proto.model.StreamChatEvent.prototype.clearInviteProfile = function() {
  this.setInviteProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.StreamChatEvent.prototype.hasInviteProfile = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventNone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventNone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventNone.displayName = 'proto.model.EventNone';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventNone.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventNone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventNone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventNone.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventNone}
 */
proto.model.EventNone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventNone;
  return proto.model.EventNone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventNone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventNone}
 */
proto.model.EventNone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventNone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventNone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventNone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventNone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventLoadRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventLoadRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventLoadRoom.displayName = 'proto.model.EventLoadRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventLoadRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventLoadRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventLoadRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLoadRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.model.ChatRoom.toObject(includeInstance, f),
    me: (f = msg.getMe()) && proto.model.ChatRoomParticipant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventLoadRoom}
 */
proto.model.EventLoadRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventLoadRoom;
  return proto.model.EventLoadRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventLoadRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventLoadRoom}
 */
proto.model.EventLoadRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatRoom;
      reader.readMessage(value,proto.model.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 2:
      var value = new proto.model.ChatRoomParticipant;
      reader.readMessage(value,proto.model.ChatRoomParticipant.deserializeBinaryFromReader);
      msg.setMe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventLoadRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventLoadRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventLoadRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLoadRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getMe();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.ChatRoomParticipant.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.model.ChatRoom}
 */
proto.model.EventLoadRoom.prototype.getRoom = function() {
  return /** @type{?proto.model.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatRoom, 1));
};


/** @param {?proto.model.ChatRoom|undefined} value */
proto.model.EventLoadRoom.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.EventLoadRoom.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.EventLoadRoom.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatRoomParticipant me = 2;
 * @return {?proto.model.ChatRoomParticipant}
 */
proto.model.EventLoadRoom.prototype.getMe = function() {
  return /** @type{?proto.model.ChatRoomParticipant} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatRoomParticipant, 2));
};


/** @param {?proto.model.ChatRoomParticipant|undefined} value */
proto.model.EventLoadRoom.prototype.setMe = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.EventLoadRoom.prototype.clearMe = function() {
  this.setMe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.EventLoadRoom.prototype.hasMe = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventLoadRooms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventLoadRooms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventLoadRooms.displayName = 'proto.model.EventLoadRooms';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventLoadRooms.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventLoadRooms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventLoadRooms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLoadRooms.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventLoadRooms}
 */
proto.model.EventLoadRooms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventLoadRooms;
  return proto.model.EventLoadRooms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventLoadRooms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventLoadRooms}
 */
proto.model.EventLoadRooms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventLoadRooms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventLoadRooms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventLoadRooms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLoadRooms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventLeaveRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventLeaveRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventLeaveRoom.displayName = 'proto.model.EventLeaveRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventLeaveRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventLeaveRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventLeaveRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLeaveRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.model.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventLeaveRoom}
 */
proto.model.EventLeaveRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventLeaveRoom;
  return proto.model.EventLeaveRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventLeaveRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventLeaveRoom}
 */
proto.model.EventLeaveRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatRoom;
      reader.readMessage(value,proto.model.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventLeaveRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventLeaveRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventLeaveRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLeaveRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.model.ChatRoom}
 */
proto.model.EventLeaveRoom.prototype.getRoom = function() {
  return /** @type{?proto.model.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatRoom, 1));
};


/** @param {?proto.model.ChatRoom|undefined} value */
proto.model.EventLeaveRoom.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.EventLeaveRoom.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.EventLeaveRoom.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventLeaveRooms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventLeaveRooms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventLeaveRooms.displayName = 'proto.model.EventLeaveRooms';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventLeaveRooms.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventLeaveRooms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventLeaveRooms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLeaveRooms.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventLeaveRooms}
 */
proto.model.EventLeaveRooms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventLeaveRooms;
  return proto.model.EventLeaveRooms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventLeaveRooms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventLeaveRooms}
 */
proto.model.EventLeaveRooms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventLeaveRooms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventLeaveRooms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventLeaveRooms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventLeaveRooms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventSendMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventSendMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventSendMessage.displayName = 'proto.model.EventSendMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventSendMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventSendMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventSendMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.model.ChatMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventSendMessage}
 */
proto.model.EventSendMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventSendMessage;
  return proto.model.EventSendMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventSendMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventSendMessage}
 */
proto.model.EventSendMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatMessage;
      reader.readMessage(value,proto.model.ChatMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventSendMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventSendMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventSendMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatMessage message = 1;
 * @return {?proto.model.ChatMessage}
 */
proto.model.EventSendMessage.prototype.getMessage = function() {
  return /** @type{?proto.model.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.model.ChatMessage, 1));
};


/** @param {?proto.model.ChatMessage|undefined} value */
proto.model.EventSendMessage.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.EventSendMessage.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.EventSendMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventSendMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.EventSendMessages.repeatedFields_, null);
};
goog.inherits(proto.model.EventSendMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventSendMessages.displayName = 'proto.model.EventSendMessages';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.EventSendMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventSendMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventSendMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventSendMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.model.ChatMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventSendMessages}
 */
proto.model.EventSendMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventSendMessages;
  return proto.model.EventSendMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventSendMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventSendMessages}
 */
proto.model.EventSendMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatMessage;
      reader.readMessage(value,proto.model.ChatMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventSendMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventSendMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventSendMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatMessage messages = 1;
 * @return {!Array<!proto.model.ChatMessage>}
 */
proto.model.EventSendMessages.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.model.ChatMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.ChatMessage, 1));
};


/** @param {!Array<!proto.model.ChatMessage>} value */
proto.model.EventSendMessages.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.ChatMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.ChatMessage}
 */
proto.model.EventSendMessages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ChatMessage, opt_index);
};


proto.model.EventSendMessages.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventSendRooms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.EventSendRooms.repeatedFields_, null);
};
goog.inherits(proto.model.EventSendRooms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventSendRooms.displayName = 'proto.model.EventSendRooms';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.EventSendRooms.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventSendRooms.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventSendRooms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventSendRooms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendRooms.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.model.ChatRoom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventSendRooms}
 */
proto.model.EventSendRooms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventSendRooms;
  return proto.model.EventSendRooms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventSendRooms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventSendRooms}
 */
proto.model.EventSendRooms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatRoom;
      reader.readMessage(value,proto.model.ChatRoom.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventSendRooms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventSendRooms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventSendRooms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventSendRooms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatRoom rooms = 1;
 * @return {!Array<!proto.model.ChatRoom>}
 */
proto.model.EventSendRooms.prototype.getRoomsList = function() {
  return /** @type{!Array<!proto.model.ChatRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.ChatRoom, 1));
};


/** @param {!Array<!proto.model.ChatRoom>} value */
proto.model.EventSendRooms.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.ChatRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.ChatRoom}
 */
proto.model.EventSendRooms.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ChatRoom, opt_index);
};


proto.model.EventSendRooms.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventInviteProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventInviteProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventInviteProfile.displayName = 'proto.model.EventInviteProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventInviteProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventInviteProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventInviteProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventInviteProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && github_com_kodesmil_ks$model_profile_pb.Profile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventInviteProfile}
 */
proto.model.EventInviteProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventInviteProfile;
  return proto.model.EventInviteProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventInviteProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventInviteProfile}
 */
proto.model.EventInviteProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_kodesmil_ks$model_profile_pb.Profile;
      reader.readMessage(value,github_com_kodesmil_ks$model_profile_pb.Profile.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventInviteProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventInviteProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventInviteProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventInviteProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_kodesmil_ks$model_profile_pb.Profile.serializeBinaryToWriter
    );
  }
};


/**
 * optional Profile user = 1;
 * @return {?proto.model.Profile}
 */
proto.model.EventInviteProfile.prototype.getUser = function() {
  return /** @type{?proto.model.Profile} */ (
    jspb.Message.getWrapperField(this, github_com_kodesmil_ks$model_profile_pb.Profile, 1));
};


/** @param {?proto.model.Profile|undefined} value */
proto.model.EventInviteProfile.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.EventInviteProfile.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.EventInviteProfile.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EventForceClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EventForceClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.EventForceClose.displayName = 'proto.model.EventForceClose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EventForceClose.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EventForceClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EventForceClose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventForceClose.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EventForceClose}
 */
proto.model.EventForceClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EventForceClose;
  return proto.model.EventForceClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EventForceClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EventForceClose}
 */
proto.model.EventForceClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EventForceClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EventForceClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EventForceClose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EventForceClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListChatMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ListChatMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListChatMessageRequest.displayName = 'proto.model.ListChatMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListChatMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListChatMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListChatMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.toObject(includeInstance, f),
    orderBy: (f = msg.getOrderBy()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.toObject(includeInstance, f),
    fields: (f = msg.getFields()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.toObject(includeInstance, f),
    paging: (f = msg.getPaging()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListChatMessageRequest}
 */
proto.model.ListChatMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListChatMessageRequest;
  return proto.model.ListChatMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListChatMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListChatMessageRequest}
 */
proto.model.ListChatMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.deserializeBinaryFromReader);
      msg.setOrderBy(value);
      break;
    case 3:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    case 4:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListChatMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListChatMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListChatMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.serializeBinaryToWriter
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.serializeBinaryToWriter
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional infoblox.api.Filtering filter = 1;
 * @return {?proto.infoblox.api.Filtering}
 */
proto.model.ListChatMessageRequest.prototype.getFilter = function() {
  return /** @type{?proto.infoblox.api.Filtering} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering, 1));
};


/** @param {?proto.infoblox.api.Filtering|undefined} value */
proto.model.ListChatMessageRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ListChatMessageRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatMessageRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional infoblox.api.Sorting order_by = 2;
 * @return {?proto.infoblox.api.Sorting}
 */
proto.model.ListChatMessageRequest.prototype.getOrderBy = function() {
  return /** @type{?proto.infoblox.api.Sorting} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting, 2));
};


/** @param {?proto.infoblox.api.Sorting|undefined} value */
proto.model.ListChatMessageRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ListChatMessageRequest.prototype.clearOrderBy = function() {
  this.setOrderBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatMessageRequest.prototype.hasOrderBy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional infoblox.api.FieldSelection fields = 3;
 * @return {?proto.infoblox.api.FieldSelection}
 */
proto.model.ListChatMessageRequest.prototype.getFields = function() {
  return /** @type{?proto.infoblox.api.FieldSelection} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection, 3));
};


/** @param {?proto.infoblox.api.FieldSelection|undefined} value */
proto.model.ListChatMessageRequest.prototype.setFields = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ListChatMessageRequest.prototype.clearFields = function() {
  this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatMessageRequest.prototype.hasFields = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional infoblox.api.Pagination paging = 4;
 * @return {?proto.infoblox.api.Pagination}
 */
proto.model.ListChatMessageRequest.prototype.getPaging = function() {
  return /** @type{?proto.infoblox.api.Pagination} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination, 4));
};


/** @param {?proto.infoblox.api.Pagination|undefined} value */
proto.model.ListChatMessageRequest.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.model.ListChatMessageRequest.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatMessageRequest.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListChatMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ListChatMessageResponse.repeatedFields_, null);
};
goog.inherits(proto.model.ListChatMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListChatMessageResponse.displayName = 'proto.model.ListChatMessageResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.ListChatMessageResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListChatMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListChatMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListChatMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.model.ChatMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListChatMessageResponse}
 */
proto.model.ListChatMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListChatMessageResponse;
  return proto.model.ListChatMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListChatMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListChatMessageResponse}
 */
proto.model.ListChatMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatMessage;
      reader.readMessage(value,proto.model.ChatMessage.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListChatMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListChatMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListChatMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatMessage results = 1;
 * @return {!Array<!proto.model.ChatMessage>}
 */
proto.model.ListChatMessageResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.model.ChatMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.ChatMessage, 1));
};


/** @param {!Array<!proto.model.ChatMessage>} value */
proto.model.ListChatMessageResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.ChatMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.ChatMessage}
 */
proto.model.ListChatMessageResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ChatMessage, opt_index);
};


proto.model.ListChatMessageResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ListChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListChatRoomRequest.displayName = 'proto.model.ListChatRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.toObject(includeInstance, f),
    orderBy: (f = msg.getOrderBy()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.toObject(includeInstance, f),
    fields: (f = msg.getFields()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.toObject(includeInstance, f),
    paging: (f = msg.getPaging()) && github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListChatRoomRequest}
 */
proto.model.ListChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListChatRoomRequest;
  return proto.model.ListChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListChatRoomRequest}
 */
proto.model.ListChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.deserializeBinaryFromReader);
      msg.setOrderBy(value);
      break;
    case 3:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    case 4:
      var value = new github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination;
      reader.readMessage(value,github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting.serializeBinaryToWriter
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection.serializeBinaryToWriter
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional infoblox.api.Filtering filter = 1;
 * @return {?proto.infoblox.api.Filtering}
 */
proto.model.ListChatRoomRequest.prototype.getFilter = function() {
  return /** @type{?proto.infoblox.api.Filtering} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Filtering, 1));
};


/** @param {?proto.infoblox.api.Filtering|undefined} value */
proto.model.ListChatRoomRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.ListChatRoomRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatRoomRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional infoblox.api.Sorting order_by = 2;
 * @return {?proto.infoblox.api.Sorting}
 */
proto.model.ListChatRoomRequest.prototype.getOrderBy = function() {
  return /** @type{?proto.infoblox.api.Sorting} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Sorting, 2));
};


/** @param {?proto.infoblox.api.Sorting|undefined} value */
proto.model.ListChatRoomRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.ListChatRoomRequest.prototype.clearOrderBy = function() {
  this.setOrderBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatRoomRequest.prototype.hasOrderBy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional infoblox.api.FieldSelection fields = 3;
 * @return {?proto.infoblox.api.FieldSelection}
 */
proto.model.ListChatRoomRequest.prototype.getFields = function() {
  return /** @type{?proto.infoblox.api.FieldSelection} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.FieldSelection, 3));
};


/** @param {?proto.infoblox.api.FieldSelection|undefined} value */
proto.model.ListChatRoomRequest.prototype.setFields = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.ListChatRoomRequest.prototype.clearFields = function() {
  this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatRoomRequest.prototype.hasFields = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional infoblox.api.Pagination paging = 4;
 * @return {?proto.infoblox.api.Pagination}
 */
proto.model.ListChatRoomRequest.prototype.getPaging = function() {
  return /** @type{?proto.infoblox.api.Pagination} */ (
    jspb.Message.getWrapperField(this, github_com_infobloxopen_atlas$app$toolkit_query_collection_operators_pb.Pagination, 4));
};


/** @param {?proto.infoblox.api.Pagination|undefined} value */
proto.model.ListChatRoomRequest.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.model.ListChatRoomRequest.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.ListChatRoomRequest.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ListChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ListChatRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.model.ListChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.ListChatRoomResponse.displayName = 'proto.model.ListChatRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.ListChatRoomResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ListChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ListChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ListChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.model.ChatRoom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ListChatRoomResponse}
 */
proto.model.ListChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ListChatRoomResponse;
  return proto.model.ListChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ListChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ListChatRoomResponse}
 */
proto.model.ListChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.ChatRoom;
      reader.readMessage(value,proto.model.ChatRoom.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ListChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ListChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ListChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ListChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatRoom results = 1;
 * @return {!Array<!proto.model.ChatRoom>}
 */
proto.model.ListChatRoomResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.model.ChatRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.ChatRoom, 1));
};


/** @param {!Array<!proto.model.ChatRoom>} value */
proto.model.ListChatRoomResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.ChatRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.ChatRoom}
 */
proto.model.ListChatRoomResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ChatRoom, opt_index);
};


proto.model.ListChatRoomResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};


goog.object.extend(exports, proto.model);
